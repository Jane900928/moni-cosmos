const Wallet = require('./src/wallet/Wallet');\nconst Transaction = require('./src/blockchain/Transaction');\n\nasync function testSignature() {\n  console.log('🧪 测试签名功能...');\n  \n  try {\n    // 创建两个钱包\n    console.log('\\n1. 创建钱包...');\n    const alice = new Wallet('Alice');\n    const bob = new Wallet('Bob');\n    \n    // 等待钱包初始化\n    await new Promise(resolve => {\n      const checkWallets = () => {\n        if (alice.address && bob.address) {\n          resolve();\n        } else {\n          setTimeout(checkWallets, 100);\n        }\n      };\n      checkWallets();\n    });\n    \n    console.log(`✅ Alice 地址: ${alice.address}`);\n    console.log(`✅ Bob 地址: ${bob.address}`);\n    \n    // 测试钱包消息签名\n    console.log('\\n2. 测试钱包消息签名...');\n    const message = 'Hello, Blockchain!';\n    const signature = await alice.signMessage(message);\n    console.log(`✅ 消息签名成功: ${signature.substring(0, 20)}...`);\n    \n    // 验证签名\n    const isValid = await Wallet.verifySignature(message, signature, alice.getPublicKeyHex());\n    console.log(`✅ 签名验证: ${isValid ? '有效' : '无效'}`);\n    \n    // 测试交易签名\n    console.log('\\n3. 测试交易签名...');\n    const transaction = new Transaction(alice.address, bob.address, 100);\n    console.log(`交易ID: ${transaction.txId}`);\n    \n    await transaction.signTransaction(alice.getPrivateKeyHex());\n    console.log(`✅ 交易签名成功: ${transaction.signature.substring(0, 20)}...`);\n    \n    // 验证交易签名\n    const txValid = await transaction.isValid();\n    console.log(`✅ 交易签名验证: ${txValid ? '有效' : '无效'}`);\n    \n    console.log('\\n🎉 所有签名测试通过！');\n    \n  } catch (error) {\n    console.error('❌ 签名测试失败:', error.message);\n    console.error(error.stack);\n  }\n}\n\n// 运行测试\nif (require.main === module) {\n  testSignature();\n}\n\nmodule.exports = testSignature;